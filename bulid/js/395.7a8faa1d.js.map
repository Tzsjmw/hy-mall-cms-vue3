{"version":3,"file":"js/395.7a8faa1d.js","mappings":"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","sources":["webpack://vue3-ts-css/../../../../../packages/components/tree/src/model/util.ts","webpack://vue3-ts-css/../../../../../packages/components/tree/src/model/node.ts","webpack://vue3-ts-css/../../../../../packages/components/tree/src/model/tree-store.ts","webpack://vue3-ts-css/../../../../../packages/components/tree/src/tree-node-content.vue","webpack://vue3-ts-css/../../../../../packages/components/tree/src/model/useNodeExpandEventBroadcast.ts","webpack://vue3-ts-css/../../../../../packages/components/tree/src/model/useDragNode.ts","webpack://vue3-ts-css/../../../../../packages/components/tree/src/tree-node.vue","webpack://vue3-ts-css/../../../../../packages/components/tree/src/model/useKeydown.ts","webpack://vue3-ts-css/../../../../../packages/components/tree/src/tree.vue","webpack://vue3-ts-css/../../../../../packages/components/tree/index.ts","webpack://vue3-ts-css/./src/views/main/system/role/role.vue?04ef","webpack://vue3-ts-css/./src/views/main/system/role/config/search.config.ts","webpack://vue3-ts-css/./src/views/main/system/role/config/content.config.ts","webpack://vue3-ts-css/./src/views/main/system/role/config/modal.config.ts","webpack://vue3-ts-css/./src/views/main/system/role/role.vue","webpack://vue3-ts-css/./src/views/main/system/role/role.vue?3deb","webpack://vue3-ts-css/../../../../../packages/components/collapse-transition/src/collapse-transition.vue","webpack://vue3-ts-css/../../../../../packages/components/collapse-transition/index.ts"],"sourcesContent":["import type Node from './node'\nimport type { TreeKey, TreeNodeData } from '../tree.type'\n\nexport const NODE_KEY = '$treeNodeId'\n\nexport const markNodeData = function (node: Node, data: TreeNodeData): void {\n  if (!data || data[NODE_KEY]) return\n  Object.defineProperty(data, NODE_KEY, {\n    value: node.id,\n    enumerable: false,\n    configurable: false,\n    writable: false,\n  })\n}\n\nexport const getNodeKey = function (key: TreeKey, data: TreeNodeData): any {\n  if (!key) return data[NODE_KEY]\n  return data[key]\n}\n","// @ts-nocheck\nimport { reactive } from 'vue'\nimport { hasOwn } from '@element-plus/utils'\nimport { NODE_KEY, markNodeData } from './util'\nimport type TreeStore from './tree-store'\n\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  FakeNode,\n  TreeKey,\n  TreeNodeChildState,\n  TreeNodeData,\n  TreeNodeLoadedDefaultProps,\n  TreeNodeOptions,\n} from '../tree.type'\n\nexport const getChildState = (node: Node[]): TreeNodeChildState => {\n  let all = true\n  let none = true\n  let allWithoutDisable = true\n  for (let i = 0, j = node.length; i < j; i++) {\n    const n = node[i]\n    if (n.checked !== true || n.indeterminate) {\n      all = false\n      if (!n.disabled) {\n        allWithoutDisable = false\n      }\n    }\n    if (n.checked !== false || n.indeterminate) {\n      none = false\n    }\n  }\n\n  return { all, none, allWithoutDisable, half: !all && !none }\n}\n\nconst reInitChecked = function (node: Node): void {\n  if (node.childNodes.length === 0) return\n\n  const { all, none, half } = getChildState(node.childNodes)\n  if (all) {\n    node.checked = true\n    node.indeterminate = false\n  } else if (half) {\n    node.checked = false\n    node.indeterminate = true\n  } else if (none) {\n    node.checked = false\n    node.indeterminate = false\n  }\n\n  const parent = node.parent\n  if (!parent || parent.level === 0) return\n\n  if (!node.store.checkStrictly) {\n    reInitChecked(parent)\n  }\n}\n\nconst getPropertyFromData = function (node: Node, prop: string): any {\n  const props = node.store.props\n  const data = node.data || {}\n  const config = props[prop]\n\n  if (typeof config === 'function') {\n    return config(data, node)\n  } else if (typeof config === 'string') {\n    return data[config]\n  } else if (typeof config === 'undefined') {\n    const dataProp = data[prop]\n    return dataProp === undefined ? '' : dataProp\n  }\n}\n\nlet nodeIdSeed = 0\n\nclass Node {\n  id: number\n  text: string\n  checked: boolean\n  indeterminate: boolean\n  data: TreeNodeData\n  expanded: boolean\n  parent: Node\n  visible: boolean\n  isCurrent: boolean\n  store: TreeStore\n  isLeafByUser: boolean\n  isLeaf: boolean\n  canFocus: boolean\n\n  level: number\n  loaded: boolean\n  childNodes: Node[]\n  loading: boolean\n\n  constructor(options: TreeNodeOptions) {\n    this.id = nodeIdSeed++\n    this.text = null\n    this.checked = false\n    this.indeterminate = false\n    this.data = null\n    this.expanded = false\n    this.parent = null\n    this.visible = true\n    this.isCurrent = false\n    this.canFocus = false\n\n    for (const name in options) {\n      if (hasOwn(options, name)) {\n        this[name] = options[name]\n      }\n    }\n\n    // internal\n    this.level = 0\n    this.loaded = false\n    this.childNodes = []\n    this.loading = false\n\n    if (this.parent) {\n      this.level = this.parent.level + 1\n    }\n  }\n\n  initialize() {\n    const store = this.store\n    if (!store) {\n      throw new Error('[Node]store is required!')\n    }\n    store.registerNode(this)\n\n    const props = store.props\n    if (props && typeof props.isLeaf !== 'undefined') {\n      const isLeaf = getPropertyFromData(this, 'isLeaf')\n      if (typeof isLeaf === 'boolean') {\n        this.isLeafByUser = isLeaf\n      }\n    }\n\n    if (store.lazy !== true && this.data) {\n      this.setData(this.data)\n\n      if (store.defaultExpandAll) {\n        this.expanded = true\n        this.canFocus = true\n      }\n    } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {\n      this.expand()\n    }\n    if (!Array.isArray(this.data)) {\n      markNodeData(this, this.data)\n    }\n    if (!this.data) return\n\n    const defaultExpandedKeys = store.defaultExpandedKeys\n    const key = store.key\n\n    if (key && defaultExpandedKeys && defaultExpandedKeys.includes(this.key)) {\n      this.expand(null, store.autoExpandParent)\n    }\n\n    if (\n      key &&\n      store.currentNodeKey !== undefined &&\n      this.key === store.currentNodeKey\n    ) {\n      store.currentNode = this\n      store.currentNode.isCurrent = true\n    }\n\n    if (store.lazy) {\n      store._initDefaultCheckedNode(this)\n    }\n\n    this.updateLeafState()\n    if (this.parent && (this.level === 1 || this.parent.expanded === true))\n      this.canFocus = true\n  }\n\n  setData(data: TreeNodeData): void {\n    if (!Array.isArray(data)) {\n      markNodeData(this, data)\n    }\n\n    this.data = data\n    this.childNodes = []\n\n    let children\n    if (this.level === 0 && Array.isArray(this.data)) {\n      children = this.data\n    } else {\n      children = getPropertyFromData(this, 'children') || []\n    }\n\n    for (let i = 0, j = children.length; i < j; i++) {\n      this.insertChild({ data: children[i] })\n    }\n  }\n\n  get label(): string {\n    return getPropertyFromData(this, 'label')\n  }\n\n  get key(): TreeKey {\n    const nodeKey = this.store.key\n    if (this.data) return this.data[nodeKey]\n    return null\n  }\n\n  get disabled(): boolean {\n    return getPropertyFromData(this, 'disabled')\n  }\n\n  get nextSibling(): Nullable<Node> {\n    const parent = this.parent\n    if (parent) {\n      const index = parent.childNodes.indexOf(this)\n      if (index > -1) {\n        return parent.childNodes[index + 1]\n      }\n    }\n    return null\n  }\n\n  get previousSibling(): Nullable<Node> {\n    const parent = this.parent\n    if (parent) {\n      const index = parent.childNodes.indexOf(this)\n      if (index > -1) {\n        return index > 0 ? parent.childNodes[index - 1] : null\n      }\n    }\n    return null\n  }\n\n  contains(target: Node, deep = true): boolean {\n    return (this.childNodes || []).some(\n      (child) => child === target || (deep && child.contains(target))\n    )\n  }\n\n  remove(): void {\n    const parent = this.parent\n    if (parent) {\n      parent.removeChild(this)\n    }\n  }\n\n  insertChild(child?: FakeNode | Node, index?: number, batch?: boolean): void {\n    if (!child) throw new Error('InsertChild error: child is required.')\n\n    if (!(child instanceof Node)) {\n      if (!batch) {\n        const children = this.getChildren(true)\n        if (!children.includes(child.data)) {\n          if (typeof index === 'undefined' || index < 0) {\n            children.push(child.data)\n          } else {\n            children.splice(index, 0, child.data)\n          }\n        }\n      }\n      Object.assign(child, {\n        parent: this,\n        store: this.store,\n      })\n      child = reactive(new Node(child as TreeNodeOptions))\n      if (child instanceof Node) {\n        child.initialize()\n      }\n    }\n\n    ;(child as Node).level = this.level + 1\n\n    if (typeof index === 'undefined' || index < 0) {\n      this.childNodes.push(child as Node)\n    } else {\n      this.childNodes.splice(index, 0, child as Node)\n    }\n\n    this.updateLeafState()\n  }\n\n  insertBefore(child: FakeNode | Node, ref: Node): void {\n    let index\n    if (ref) {\n      index = this.childNodes.indexOf(ref)\n    }\n    this.insertChild(child, index)\n  }\n\n  insertAfter(child: FakeNode | Node, ref: Node): void {\n    let index\n    if (ref) {\n      index = this.childNodes.indexOf(ref)\n      if (index !== -1) index += 1\n    }\n    this.insertChild(child, index)\n  }\n\n  removeChild(child: Node): void {\n    const children = this.getChildren() || []\n    const dataIndex = children.indexOf(child.data)\n    if (dataIndex > -1) {\n      children.splice(dataIndex, 1)\n    }\n\n    const index = this.childNodes.indexOf(child)\n\n    if (index > -1) {\n      this.store && this.store.deregisterNode(child)\n      child.parent = null\n      this.childNodes.splice(index, 1)\n    }\n\n    this.updateLeafState()\n  }\n\n  removeChildByData(data: TreeNodeData): void {\n    let targetNode: Node = null\n\n    for (let i = 0; i < this.childNodes.length; i++) {\n      if (this.childNodes[i].data === data) {\n        targetNode = this.childNodes[i]\n        break\n      }\n    }\n\n    if (targetNode) {\n      this.removeChild(targetNode)\n    }\n  }\n\n  expand(callback?: () => void, expandParent?: boolean): void {\n    const done = (): void => {\n      if (expandParent) {\n        let parent = this.parent\n        while (parent.level > 0) {\n          parent.expanded = true\n          parent = parent.parent\n        }\n      }\n      this.expanded = true\n      if (callback) callback()\n      this.childNodes.forEach((item) => {\n        item.canFocus = true\n      })\n    }\n\n    if (this.shouldLoadData()) {\n      this.loadData((data) => {\n        if (Array.isArray(data)) {\n          if (this.checked) {\n            this.setChecked(true, true)\n          } else if (!this.store.checkStrictly) {\n            reInitChecked(this)\n          }\n          done()\n        }\n      })\n    } else {\n      done()\n    }\n  }\n\n  doCreateChildren(\n    array: TreeNodeData[],\n    defaultProps: TreeNodeLoadedDefaultProps = {}\n  ): void {\n    array.forEach((item) => {\n      this.insertChild(\n        Object.assign({ data: item }, defaultProps),\n        undefined,\n        true\n      )\n    })\n  }\n\n  collapse(): void {\n    this.expanded = false\n    this.childNodes.forEach((item) => {\n      item.canFocus = false\n    })\n  }\n\n  shouldLoadData(): boolean {\n    return this.store.lazy === true && this.store.load && !this.loaded\n  }\n\n  updateLeafState(): void {\n    if (\n      this.store.lazy === true &&\n      this.loaded !== true &&\n      typeof this.isLeafByUser !== 'undefined'\n    ) {\n      this.isLeaf = this.isLeafByUser\n      return\n    }\n    const childNodes = this.childNodes\n    if (\n      !this.store.lazy ||\n      (this.store.lazy === true && this.loaded === true)\n    ) {\n      this.isLeaf = !childNodes || childNodes.length === 0\n      return\n    }\n    this.isLeaf = false\n  }\n\n  setChecked(\n    value?: boolean | string,\n    deep?: boolean,\n    recursion?: boolean,\n    passValue?: boolean\n  ) {\n    this.indeterminate = value === 'half'\n    this.checked = value === true\n\n    if (this.store.checkStrictly) return\n\n    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {\n      const { all, allWithoutDisable } = getChildState(this.childNodes)\n\n      if (!this.isLeaf && !all && allWithoutDisable) {\n        this.checked = false\n        value = false\n      }\n\n      const handleDescendants = (): void => {\n        if (deep) {\n          const childNodes = this.childNodes\n          for (let i = 0, j = childNodes.length; i < j; i++) {\n            const child = childNodes[i]\n            passValue = passValue || value !== false\n            const isCheck = child.disabled ? child.checked : passValue\n            child.setChecked(isCheck, deep, true, passValue)\n          }\n          const { half, all } = getChildState(childNodes)\n          if (!all) {\n            this.checked = all\n            this.indeterminate = half\n          }\n        }\n      }\n\n      if (this.shouldLoadData()) {\n        // Only work on lazy load data.\n        this.loadData(\n          () => {\n            handleDescendants()\n            reInitChecked(this)\n          },\n          {\n            checked: value !== false,\n          }\n        )\n        return\n      } else {\n        handleDescendants()\n      }\n    }\n\n    const parent = this.parent\n    if (!parent || parent.level === 0) return\n\n    if (!recursion) {\n      reInitChecked(parent)\n    }\n  }\n\n  getChildren(forceInit = false): TreeNodeData | TreeNodeData[] {\n    // this is data\n    if (this.level === 0) return this.data\n    const data = this.data\n    if (!data) return null\n\n    const props = this.store.props\n    let children = 'children'\n    if (props) {\n      children = props.children || 'children'\n    }\n\n    if (data[children] === undefined) {\n      data[children] = null\n    }\n\n    if (forceInit && !data[children]) {\n      data[children] = []\n    }\n\n    return data[children]\n  }\n\n  updateChildren(): void {\n    const newData = (this.getChildren() || []) as TreeNodeData[]\n    const oldData = this.childNodes.map((node) => node.data)\n\n    const newDataMap = {}\n    const newNodes = []\n\n    newData.forEach((item, index) => {\n      const key = item[NODE_KEY]\n      const isNodeExists =\n        !!key && oldData.findIndex((data) => data[NODE_KEY] === key) >= 0\n      if (isNodeExists) {\n        newDataMap[key] = { index, data: item }\n      } else {\n        newNodes.push({ index, data: item })\n      }\n    })\n\n    if (!this.store.lazy) {\n      oldData.forEach((item) => {\n        if (!newDataMap[item[NODE_KEY]]) this.removeChildByData(item)\n      })\n    }\n\n    newNodes.forEach(({ index, data }) => {\n      this.insertChild({ data }, index)\n    })\n\n    this.updateLeafState()\n  }\n\n  loadData(\n    callback: (node: Node) => void,\n    defaultProps: TreeNodeLoadedDefaultProps = {}\n  ) {\n    if (\n      this.store.lazy === true &&\n      this.store.load &&\n      !this.loaded &&\n      (!this.loading || Object.keys(defaultProps).length)\n    ) {\n      this.loading = true\n\n      const resolve = (children) => {\n        this.loaded = true\n        this.loading = false\n        this.childNodes = []\n\n        this.doCreateChildren(children, defaultProps)\n\n        this.updateLeafState()\n        if (callback) {\n          callback.call(this, children)\n        }\n      }\n\n      this.store.load(this, resolve)\n    } else {\n      if (callback) {\n        callback.call(this)\n      }\n    }\n  }\n}\n\nexport default Node\n","// @ts-nocheck\nimport { hasOwn } from '@element-plus/utils'\nimport Node from './node'\nimport { getNodeKey } from './util'\n\nimport type {\n  FilterNodeMethodFunction,\n  FilterValue,\n  LoadFunction,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n  TreeOptionProps,\n  TreeStoreNodesMap,\n  TreeStoreOptions,\n} from '../tree.type'\n\nexport default class TreeStore {\n  currentNode: Node\n  currentNodeKey: TreeKey\n  nodesMap: TreeStoreNodesMap\n  root: Node\n  data: TreeData\n  lazy: boolean\n  load: LoadFunction\n  filterNodeMethod: FilterNodeMethodFunction\n  key: TreeKey\n  defaultCheckedKeys: TreeKey[]\n  checkStrictly: boolean\n  defaultExpandedKeys: TreeKey[]\n  autoExpandParent: boolean\n  defaultExpandAll: boolean\n  checkDescendants: boolean\n  props: TreeOptionProps\n\n  constructor(options: TreeStoreOptions) {\n    this.currentNode = null\n    this.currentNodeKey = null\n\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option]\n      }\n    }\n\n    this.nodesMap = {}\n  }\n\n  initialize() {\n    this.root = new Node({\n      data: this.data,\n      store: this,\n    })\n    this.root.initialize()\n\n    if (this.lazy && this.load) {\n      const loadFn = this.load\n      loadFn(this.root, (data) => {\n        this.root.doCreateChildren(data)\n        this._initDefaultCheckedNodes()\n      })\n    } else {\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  filter(value: FilterValue): void {\n    const filterNodeMethod = this.filterNodeMethod\n    const lazy = this.lazy\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        child.visible = filterNodeMethod.call(child, value, child.data, child)\n\n        traverse(child)\n      })\n\n      if (!(node as Node).visible && childNodes.length) {\n        let allHidden = true\n        allHidden = !childNodes.some((child) => child.visible)\n\n        if ((node as TreeStore).root) {\n          ;(node as TreeStore).root.visible = allHidden === false\n        } else {\n          ;(node as Node).visible = allHidden === false\n        }\n      }\n      if (!value) return\n\n      if ((node as Node).visible && !(node as Node).isLeaf && !lazy)\n        (node as Node).expand()\n    }\n\n    traverse(this)\n  }\n\n  setData(newVal: TreeData): void {\n    const instanceChanged = newVal !== this.root.data\n    if (instanceChanged) {\n      this.root.setData(newVal)\n      this._initDefaultCheckedNodes()\n    } else {\n      this.root.updateChildren()\n    }\n  }\n\n  getNode(data: TreeKey | TreeNodeData): Node {\n    if (data instanceof Node) return data\n    const key = typeof data !== 'object' ? data : getNodeKey(this.key, data)\n    return this.nodesMap[key] || null\n  }\n\n  insertBefore(data: TreeNodeData, refData: TreeKey | TreeNodeData): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertBefore({ data }, refNode)\n  }\n\n  insertAfter(data: TreeNodeData, refData: TreeKey | TreeNodeData): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertAfter({ data }, refNode)\n  }\n\n  remove(data: TreeNodeData | Node): void {\n    const node = this.getNode(data)\n\n    if (node && node.parent) {\n      if (node === this.currentNode) {\n        this.currentNode = null\n      }\n      node.parent.removeChild(node)\n    }\n  }\n\n  append(data: TreeNodeData, parentData: TreeNodeData | TreeKey | Node): void {\n    const parentNode = parentData ? this.getNode(parentData) : this.root\n\n    if (parentNode) {\n      parentNode.insertChild({ data })\n    }\n  }\n\n  _initDefaultCheckedNodes(): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n    const nodesMap = this.nodesMap\n\n    defaultCheckedKeys.forEach((checkedKey) => {\n      const node = nodesMap[checkedKey]\n\n      if (node) {\n        node.setChecked(true, !this.checkStrictly)\n      }\n    })\n  }\n\n  _initDefaultCheckedNode(node: Node): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n\n    if (defaultCheckedKeys.includes(node.key)) {\n      node.setChecked(true, !this.checkStrictly)\n    }\n  }\n\n  setDefaultCheckedKey(newVal: TreeKey[]): void {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  registerNode(node: Node): void {\n    const key = this.key\n    if (!node || !node.data) return\n\n    if (!key) {\n      this.nodesMap[node.id] = node\n    } else {\n      const nodeKey = node.key\n      if (nodeKey !== undefined) this.nodesMap[node.key] = node\n    }\n  }\n\n  deregisterNode(node: Node): void {\n    const key = this.key\n    if (!key || !node || !node.data) return\n\n    node.childNodes.forEach((child) => {\n      this.deregisterNode(child)\n    })\n\n    delete this.nodesMap[node.key]\n  }\n\n  getCheckedNodes(\n    leafOnly = false,\n    includeHalfChecked = false\n  ): TreeNodeData[] {\n    const checkedNodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (\n          (child.checked || (includeHalfChecked && child.indeterminate)) &&\n          (!leafOnly || (leafOnly && child.isLeaf))\n        ) {\n          checkedNodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return checkedNodes\n  }\n\n  getCheckedKeys(leafOnly = false): TreeKey[] {\n    return this.getCheckedNodes(leafOnly).map((data) => (data || {})[this.key])\n  }\n\n  getHalfCheckedNodes(): TreeNodeData[] {\n    const nodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (child.indeterminate) {\n          nodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return nodes\n  }\n\n  getHalfCheckedKeys(): TreeKey[] {\n    return this.getHalfCheckedNodes().map((data) => (data || {})[this.key])\n  }\n\n  _getAllNodes(): Node[] {\n    const allNodes: Node[] = []\n    const nodesMap = this.nodesMap\n    for (const nodeKey in nodesMap) {\n      if (hasOwn(nodesMap, nodeKey)) {\n        allNodes.push(nodesMap[nodeKey])\n      }\n    }\n\n    return allNodes\n  }\n\n  updateChildren(key: TreeKey, data: TreeData): void {\n    const node = this.nodesMap[key]\n    if (!node) return\n    const childNodes = node.childNodes\n    for (let i = childNodes.length - 1; i >= 0; i--) {\n      const child = childNodes[i]\n      this.remove(child.data)\n    }\n    for (let i = 0, j = data.length; i < j; i++) {\n      const child = data[i]\n      this.append(child, node.data)\n    }\n  }\n\n  _setCheckedKeys(\n    key: TreeKey,\n    leafOnly = false,\n    checkedKeys: { [key: string]: boolean }\n  ): void {\n    const allNodes = this._getAllNodes().sort((a, b) => b.level - a.level)\n    const cache = Object.create(null)\n    const keys = Object.keys(checkedKeys)\n    allNodes.forEach((node) => node.setChecked(false, false))\n    for (let i = 0, j = allNodes.length; i < j; i++) {\n      const node = allNodes[i]\n      const nodeKey = node.data[key].toString()\n      const checked = keys.includes(nodeKey)\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false)\n        }\n        continue\n      }\n\n      let parent = node.parent\n      while (parent && parent.level > 0) {\n        cache[parent.data[key]] = true\n        parent = parent.parent\n      }\n\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false)\n        continue\n      }\n      node.setChecked(true, true)\n\n      if (leafOnly) {\n        node.setChecked(false, false)\n        const traverse = function (node: Node): void {\n          const childNodes = node.childNodes\n          childNodes.forEach((child) => {\n            if (!child.isLeaf) {\n              child.setChecked(false, false)\n            }\n            traverse(child)\n          })\n        }\n        traverse(node)\n      }\n    }\n  }\n\n  setCheckedNodes(array: Node[], leafOnly = false): void {\n    const key = this.key\n    const checkedKeys = {}\n    array.forEach((item) => {\n      checkedKeys[(item || {})[key]] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setCheckedKeys(keys: TreeKey[], leafOnly = false): void {\n    this.defaultCheckedKeys = keys\n    const key = this.key\n    const checkedKeys = {}\n    keys.forEach((key) => {\n      checkedKeys[key] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setDefaultExpandedKeys(keys: TreeKey[]) {\n    keys = keys || []\n    this.defaultExpandedKeys = keys\n    keys.forEach((key) => {\n      const node = this.getNode(key)\n      if (node) node.expand(null, this.autoExpandParent)\n    })\n  }\n\n  setChecked(\n    data: TreeKey | TreeNodeData,\n    checked: boolean,\n    deep: boolean\n  ): void {\n    const node = this.getNode(data)\n\n    if (node) {\n      node.setChecked(!!checked, deep)\n    }\n  }\n\n  getCurrentNode(): Node {\n    return this.currentNode\n  }\n\n  setCurrentNode(currentNode: Node): void {\n    const prevCurrentNode = this.currentNode\n    if (prevCurrentNode) {\n      prevCurrentNode.isCurrent = false\n    }\n    this.currentNode = currentNode\n    this.currentNode.isCurrent = true\n  }\n\n  setUserCurrentNode(node: Node, shouldAutoExpandParent = true): void {\n    const key = node[this.key]\n    const currNode = this.nodesMap[key]\n    this.setCurrentNode(currNode)\n    if (shouldAutoExpandParent && this.currentNode.level > 1) {\n      this.currentNode.parent.expand(null, true)\n    }\n  }\n\n  setCurrentNodeKey(key: TreeKey, shouldAutoExpandParent = true): void {\n    if (key === null || key === undefined) {\n      this.currentNode && (this.currentNode.isCurrent = false)\n      this.currentNode = null\n      return\n    }\n    const node = this.getNode(key)\n    if (node) {\n      this.setCurrentNode(node)\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true)\n      }\n    }\n  }\n}\n","<script lang=\"ts\">\n// @ts-nocheck\nimport { defineComponent, h, inject } from 'vue'\n\nimport { useNamespace } from '@element-plus/hooks'\nimport type { ComponentInternalInstance } from 'vue'\nimport type { RootTreeType } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNodeContent',\n  props: {\n    node: {\n      type: Object,\n      required: true,\n    },\n    renderContent: Function,\n  },\n  setup(props) {\n    const ns = useNamespace('tree')\n    const nodeInstance = inject<ComponentInternalInstance>('NodeInstance')\n    const tree = inject<RootTreeType>('RootTree')\n    return () => {\n      const node = props.node\n      const { data, store } = node\n      return props.renderContent\n        ? props.renderContent(h, { _self: nodeInstance, node, data, store })\n        : tree.ctx.slots.default\n        ? tree.ctx.slots.default({ node, data })\n        : h('span', { class: ns.be('node', 'label') }, [node.label])\n    }\n  },\n})\n</script>\n","// @ts-nocheck\nimport { inject, provide } from 'vue'\nimport type Node from '../model/node'\n\ninterface NodeMap {\n  treeNodeExpand(node: Node): void\n  children: NodeMap[]\n}\n\nexport function useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = inject<NodeMap>('TreeNodeMap', null)\n  const currentNodeMap: NodeMap = {\n    treeNodeExpand: (node) => {\n      if (props.node !== node) {\n        props.node.collapse()\n      }\n    },\n    children: [],\n  }\n\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap)\n  }\n\n  provide('TreeNodeMap', currentNodeMap)\n\n  return {\n    broadcastExpanded: (node: Node): void => {\n      if (!props.accordion) return\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node)\n      }\n    },\n  }\n}\n","// @ts-nocheck\nimport { provide, ref } from 'vue'\nimport { addClass, removeClass } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport type { InjectionKey } from 'vue'\nimport type Node from './node'\n\ninterface TreeNode {\n  node: Node\n  $el?: HTMLElement\n}\n\ninterface DragOptions {\n  event: DragEvent\n  treeNode: TreeNode\n}\n\nexport interface DragEvents {\n  treeNodeDragStart: (options: DragOptions) => void\n  treeNodeDragOver: (options: DragOptions) => void\n  treeNodeDragEnd: (event: DragEvent) => void\n}\n\nexport const dragEventsKey: InjectionKey<DragEvents> = Symbol('dragEvents')\n\nexport function useDragNodeHandler({ props, ctx, el$, dropIndicator$, store }) {\n  const ns = useNamespace('tree')\n  const dragState = ref({\n    showDropIndicator: false,\n    draggingNode: null,\n    dropNode: null,\n    allowDrop: true,\n    dropType: null,\n  })\n\n  const treeNodeDragStart = ({ event, treeNode }: DragOptions) => {\n    if (\n      typeof props.allowDrag === 'function' &&\n      !props.allowDrag(treeNode.node)\n    ) {\n      event.preventDefault()\n      return false\n    }\n    event.dataTransfer.effectAllowed = 'move'\n\n    // wrap in try catch to address IE's error when first param is 'text/plain'\n    try {\n      // setData is required for draggable to work in FireFox\n      // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox\n      event.dataTransfer.setData('text/plain', '')\n    } catch {}\n    dragState.value.draggingNode = treeNode\n    ctx.emit('node-drag-start', treeNode.node, event)\n  }\n\n  const treeNodeDragOver = ({ event, treeNode }: DragOptions) => {\n    const dropNode = treeNode\n    const oldDropNode = dragState.value.dropNode\n    if (oldDropNode && oldDropNode !== dropNode) {\n      removeClass(oldDropNode.$el, ns.is('drop-inner'))\n    }\n    const draggingNode = dragState.value.draggingNode\n    if (!draggingNode || !dropNode) return\n\n    let dropPrev = true\n    let dropInner = true\n    let dropNext = true\n    let userAllowDropInner = true\n    if (typeof props.allowDrop === 'function') {\n      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, 'prev')\n      userAllowDropInner = dropInner = props.allowDrop(\n        draggingNode.node,\n        dropNode.node,\n        'inner'\n      )\n      dropNext = props.allowDrop(draggingNode.node, dropNode.node, 'next')\n    }\n    event.dataTransfer.dropEffect =\n      dropInner || dropPrev || dropNext ? 'move' : 'none'\n    if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n      if (oldDropNode) {\n        ctx.emit('node-drag-leave', draggingNode.node, oldDropNode.node, event)\n      }\n      ctx.emit('node-drag-enter', draggingNode.node, dropNode.node, event)\n    }\n\n    if (dropPrev || dropInner || dropNext) {\n      dragState.value.dropNode = dropNode\n    }\n\n    if (dropNode.node.nextSibling === draggingNode.node) {\n      dropNext = false\n    }\n    if (dropNode.node.previousSibling === draggingNode.node) {\n      dropPrev = false\n    }\n    if (dropNode.node.contains(draggingNode.node, false)) {\n      dropInner = false\n    }\n    if (\n      draggingNode.node === dropNode.node ||\n      draggingNode.node.contains(dropNode.node)\n    ) {\n      dropPrev = false\n      dropInner = false\n      dropNext = false\n    }\n\n    const targetPosition = dropNode.$el.getBoundingClientRect()\n    const treePosition = el$.value.getBoundingClientRect()\n\n    let dropType\n    const prevPercent = dropPrev ? (dropInner ? 0.25 : dropNext ? 0.45 : 1) : -1\n    const nextPercent = dropNext ? (dropInner ? 0.75 : dropPrev ? 0.55 : 0) : 1\n\n    let indicatorTop = -9999\n    const distance = event.clientY - targetPosition.top\n    if (distance < targetPosition.height * prevPercent) {\n      dropType = 'before'\n    } else if (distance > targetPosition.height * nextPercent) {\n      dropType = 'after'\n    } else if (dropInner) {\n      dropType = 'inner'\n    } else {\n      dropType = 'none'\n    }\n\n    const iconPosition = dropNode.$el\n      .querySelector(`.${ns.be('node', 'expand-icon')}`)\n      .getBoundingClientRect()\n    const dropIndicator = dropIndicator$.value\n    if (dropType === 'before') {\n      indicatorTop = iconPosition.top - treePosition.top\n    } else if (dropType === 'after') {\n      indicatorTop = iconPosition.bottom - treePosition.top\n    }\n    dropIndicator.style.top = `${indicatorTop}px`\n    dropIndicator.style.left = `${iconPosition.right - treePosition.left}px`\n\n    if (dropType === 'inner') {\n      addClass(dropNode.$el, ns.is('drop-inner'))\n    } else {\n      removeClass(dropNode.$el, ns.is('drop-inner'))\n    }\n\n    dragState.value.showDropIndicator =\n      dropType === 'before' || dropType === 'after'\n    dragState.value.allowDrop =\n      dragState.value.showDropIndicator || userAllowDropInner\n    dragState.value.dropType = dropType\n    ctx.emit('node-drag-over', draggingNode.node, dropNode.node, event)\n  }\n\n  const treeNodeDragEnd = (event: DragEvent) => {\n    const { draggingNode, dropType, dropNode } = dragState.value\n    event.preventDefault()\n    event.dataTransfer.dropEffect = 'move'\n\n    if (draggingNode && dropNode) {\n      const draggingNodeCopy = { data: draggingNode.node.data }\n      if (dropType !== 'none') {\n        draggingNode.node.remove()\n      }\n      if (dropType === 'before') {\n        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node)\n      } else if (dropType === 'after') {\n        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node)\n      } else if (dropType === 'inner') {\n        dropNode.node.insertChild(draggingNodeCopy)\n      }\n      if (dropType !== 'none') {\n        store.value.registerNode(draggingNodeCopy)\n      }\n\n      removeClass(dropNode.$el, ns.is('drop-inner'))\n\n      ctx.emit(\n        'node-drag-end',\n        draggingNode.node,\n        dropNode.node,\n        dropType,\n        event\n      )\n      if (dropType !== 'none') {\n        ctx.emit('node-drop', draggingNode.node, dropNode.node, dropType, event)\n      }\n    }\n    if (draggingNode && !dropNode) {\n      ctx.emit('node-drag-end', draggingNode.node, null, dropType, event)\n    }\n\n    dragState.value.showDropIndicator = false\n    dragState.value.draggingNode = null\n    dragState.value.dropNode = null\n    dragState.value.allowDrop = true\n  }\n\n  provide(dragEventsKey, {\n    treeNodeDragStart,\n    treeNodeDragOver,\n    treeNodeDragEnd,\n  })\n\n  return {\n    dragState,\n  }\n}\n","<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { isFunction, isString } from '@vue/shared'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { RootTreeType, TreeNodeData, TreeOptionProps } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      const store = tree.store.value\n      store.setCurrentNode(props.node)\n      tree.ctx.emit(\n        'current-change',\n        store.currentNode ? store.currentNode.data : null,\n        store.currentNode\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n","// @ts-nocheck\nimport { onBeforeUnmount, onMounted, onUpdated, shallowRef, watch } from 'vue'\nimport { off, on } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport type TreeStore from './tree-store'\n\nimport type { Ref } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\ninterface UseKeydownOption {\n  el$: Ref<HTMLElement>\n}\nexport function useKeydown({ el$ }: UseKeydownOption, store: Ref<TreeStore>) {\n  const ns = useNamespace('tree')\n\n  const treeItems = shallowRef<Nullable<HTMLElement>[]>([])\n  const checkboxItems = shallowRef<Nullable<HTMLElement>[]>([])\n\n  onMounted(() => {\n    initTabIndex()\n    on(el$.value, 'keydown', handleKeydown)\n  })\n\n  onBeforeUnmount(() => {\n    off(el$.value, 'keydown', handleKeydown)\n  })\n\n  onUpdated(() => {\n    treeItems.value = Array.from(el$.value.querySelectorAll('[role=treeitem]'))\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n  })\n\n  watch(checkboxItems, (val) => {\n    val.forEach((checkbox) => {\n      checkbox.setAttribute('tabindex', '-1')\n    })\n  })\n\n  const handleKeydown = (ev: KeyboardEvent): void => {\n    const currentItem = ev.target as HTMLElement\n    if (!currentItem.className.includes(ns.b('node'))) return\n    const code = ev.code\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    const currentIndex = treeItems.value.indexOf(currentItem)\n    let nextIndex\n    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {\n      ev.preventDefault()\n      if (code === EVENT_CODE.up) {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex !== 0\n            ? currentIndex - 1\n            : treeItems.value.length - 1\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex--\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1\n          }\n        }\n      } else {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex < treeItems.value.length - 1\n            ? currentIndex + 1\n            : 0\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex++\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems.value[nextIndex].focus()\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {\n      ev.preventDefault()\n      currentItem.click()\n    }\n    const hasInput = currentItem.querySelector(\n      '[type=\"checkbox\"]'\n    ) as Nullable<HTMLInputElement>\n    if ([EVENT_CODE.enter, EVENT_CODE.space].includes(code) && hasInput) {\n      ev.preventDefault()\n      hasInput.click()\n    }\n  }\n\n  const initTabIndex = (): void => {\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n    const checkedItem = el$.value.querySelectorAll(\n      `.${ns.is('checked')}[role=treeitem]`\n    )\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute('tabindex', '0')\n      return\n    }\n    treeItems.value[0]?.setAttribute('tabindex', '0')\n  }\n}\n","<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/tokens'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { Component, ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: [String, Object] as PropType<string | Component>,\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys, leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n    }\n\n    const setCurrentKey = (key: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    provide(formItemContextKey, undefined)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n","import Tree from './src/tree.vue'\n\nimport type { App } from 'vue'\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nTree.install = (app: App): void => {\n  app.component(Tree.name, Tree)\n}\n\nconst _Tree = Tree as SFCWithInstall<typeof Tree>\n\nexport default _Tree\nexport const ElTree = _Tree\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-7f8cfe1b\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"role\"\n};\nconst _hoisted_2 = {\n  class: \"menu-tree\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_page_search = _resolveComponent(\"page-search\");\n\n  const _component_page_content = _resolveComponent(\"page-content\");\n\n  const _component_el_tree = _resolveComponent(\"el-tree\");\n\n  const _component_page_modal = _resolveComponent(\"page-modal\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_page_search, {\n    pageName: \"role\",\n    searchFormConfig: _ctx.searchFormConfig,\n    onResetBtnClick: _ctx.handleResetClick,\n    onQueryBtnClick: _ctx.handleQueryClick\n  }, null, 8, [\"searchFormConfig\", \"onResetBtnClick\", \"onQueryBtnClick\"]), _createVNode(_component_page_content, {\n    contentTableConfig: _ctx.contentTableConfig,\n    pageName: \"role\",\n    ref: \"pageContentRef\",\n    onNewBtnClick: _ctx.handleNewData,\n    onEditBtnClick: _ctx.handleEditData,\n    btnName: \"新建角色\"\n  }, null, 8, [\"contentTableConfig\", \"onNewBtnClick\", \"onEditBtnClick\"]), _createVNode(_component_page_modal, {\n    ref: \"pageModalRef\",\n    defaultInfo: _ctx.defaultInfo,\n    modalConfig: _ctx.modalConfig,\n    pageName: \"role\",\n    otherInfo: _ctx.otherInfo\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_el_tree, {\n      ref: \"elTreeRef\",\n      data: _ctx.menus,\n      \"show-checkbox\": \"\",\n      \"node-key\": \"id\",\n      props: {\n        children: 'children',\n        label: 'name'\n      },\n      onCheck: _ctx.handleCheckChange\n    }, null, 8, [\"data\", \"onCheck\"])])]),\n    _: 1\n  }, 8, [\"defaultInfo\", \"modalConfig\", \"otherInfo\"])]);\n}","import { IForm } from '@/base-ui/form'\n\nexport const searchFormConfig: IForm = {\n  labelWidth: '120px',\n  formItems: [\n    {\n      field: 'name',\n      type: 'input',\n      label: '角色名称',\n      placeholder: '请输入角色名称'\n    },\n    {\n      field: 'intro',\n      type: 'input',\n      label: '权限介绍',\n      placeholder: '请输入权限介绍'\n    },\n    {\n      field: 'createAt',\n      type: 'datepicker',\n      label: '创建时间',\n      otherOptions: {\n        startPlaceholder: '开始时间',\n        endPlaceholder: '结束时间',\n        type: 'daterange'\n      }\n    }\n  ]\n}\n","export const contentTableConfig = {\n  title: '用户列表',\n  propList: [\n    { prop: 'name', label: '角色名', minWidth: '100' },\n    { prop: 'intro', label: '权限介绍', minWidth: '100' },\n    {\n      prop: 'createAt',\n      label: '创建时间',\n      minWidth: '250',\n      slotName: 'createAt'\n    },\n    {\n      prop: 'updateAt',\n      label: '更新时间',\n      minWidth: '250',\n      slotName: 'updateAt'\n    },\n    { label: '操作', minWidth: '120', slotName: 'handler' }\n  ],\n  showIndexColumn: true,\n  showSelectColumn: true\n}\n","import { IForm } from '@/base-ui/form'\n\nexport const modalConfig: IForm = {\n  formItems: [\n    {\n      field: 'name',\n      type: 'input',\n      label: '角色名',\n      placeholder: '请输入角色名'\n    },\n    {\n      field: 'intro',\n      type: 'input',\n      label: '角色介绍',\n      placeholder: '请输入角色介绍'\n    }\n  ],\n  labelWidth: '100px',\n  colLayout: {\n    span: 24\n  },\n  itemStyle: { padding: '0px 10px' }\n}\n","import { defineComponent, computed, ref, nextTick } from 'vue';\nimport { useStore } from '@/store';\nimport { menuMapLeafKeys } from '@/utils/map-menus';\nimport PageSearch from '@/components/page-search';\nimport PageContent from '@/components/page-content';\nimport PageModal from '@/components/page-modal';\nimport { searchFormConfig } from './config/search.config';\nimport { contentTableConfig } from './config/content.config';\nimport { modalConfig } from './config/modal.config';\nimport { usePageSearch } from '@/hooks/use-page-search';\nimport { usePageModal } from '@/hooks/use-page-modal';\nexport default defineComponent({\n  name: 'role',\n  components: {\n    PageContent,\n    PageSearch,\n    PageModal\n  },\n\n  setup() {\n    // 1.处理pageModal的hook 菜单树的回显（编辑里面的菜单树）\n    const elTreeRef = ref();\n\n    const editCallback = item => {\n      const leafKeys = menuMapLeafKeys(item.menuList);\n      nextTick(() => {\n        // console.log(elTreeRef.value)\n        elTreeRef.value?.setCheckedKeys(leafKeys, false);\n      });\n    }; // 调用hook获取公共变量和函数\n\n\n    const [pageModalRef, defaultInfo, handleNewData, handleEditData] = usePageModal(undefined, editCallback); // 查询\n\n    const [pageContentRef, handleResetClick, handleQueryClick] = usePageSearch(); // 新增里树形控件\n\n    const store = useStore();\n    const menus = computed(() => store.state.entireMenu);\n    const otherInfo = ref({});\n\n    const handleCheckChange = (data1, data2) => {\n      const checkedKeys = data2.checkedKeys;\n      const halfCheckedKeys = data2.halfCheckedKeys;\n      const menuList = [...checkedKeys, ...halfCheckedKeys];\n      otherInfo.value = {\n        menuList\n      };\n    };\n\n    return {\n      searchFormConfig,\n      contentTableConfig,\n      modalConfig,\n      pageModalRef,\n      defaultInfo,\n      handleNewData,\n      handleEditData,\n      pageContentRef,\n      handleResetClick,\n      handleQueryClick,\n      menus,\n      handleCheckChange,\n      otherInfo,\n      elTreeRef\n    };\n  }\n\n});","/* unplugin-vue-components disabled */import { render } from \"./role.vue?vue&type=template&id=7f8cfe1b&scoped=true&ts=true\"\nimport script from \"./role.vue?vue&type=script&lang=ts\"\nexport * from \"./role.vue?vue&type=script&lang=ts\"\n\nimport \"./role.vue?vue&type=style&index=0&id=7f8cfe1b&scoped=true&lang=less\"\n\nimport exportComponent from \"C:\\\\Users\\\\吴彦祖\\\\Desktop\\\\acc\\\\vue3-ts-cms\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7f8cfe1b\"]])\n\nexport default __exports__","<template>\n  <transition :name=\"ns.b()\" v-on=\"on\">\n    <slot />\n  </transition>\n</template>\n<script lang=\"ts\" setup>\nimport { useNamespace } from '@element-plus/hooks'\nimport type { RendererElement } from '@vue/runtime-core'\n\ndefineOptions({\n  name: 'ElCollapseTransition',\n})\n\nconst ns = useNamespace('collapse-transition')\n\nconst on = {\n  beforeEnter(el: RendererElement) {\n    if (!el.dataset) el.dataset = {}\n\n    el.dataset.oldPaddingTop = el.style.paddingTop\n    el.dataset.oldPaddingBottom = el.style.paddingBottom\n\n    el.style.maxHeight = 0\n    el.style.paddingTop = 0\n    el.style.paddingBottom = 0\n  },\n\n  enter(el: RendererElement) {\n    el.dataset.oldOverflow = el.style.overflow\n    if (el.scrollHeight !== 0) {\n      el.style.maxHeight = `${el.scrollHeight}px`\n      el.style.paddingTop = el.dataset.oldPaddingTop\n      el.style.paddingBottom = el.dataset.oldPaddingBottom\n    } else {\n      el.style.maxHeight = 0\n      el.style.paddingTop = el.dataset.oldPaddingTop\n      el.style.paddingBottom = el.dataset.oldPaddingBottom\n    }\n\n    el.style.overflow = 'hidden'\n  },\n\n  afterEnter(el: RendererElement) {\n    el.style.maxHeight = ''\n    el.style.overflow = el.dataset.oldOverflow\n  },\n\n  beforeLeave(el: RendererElement) {\n    if (!el.dataset) el.dataset = {}\n    el.dataset.oldPaddingTop = el.style.paddingTop\n    el.dataset.oldPaddingBottom = el.style.paddingBottom\n    el.dataset.oldOverflow = el.style.overflow\n\n    el.style.maxHeight = `${el.scrollHeight}px`\n    el.style.overflow = 'hidden'\n  },\n\n  leave(el: RendererElement) {\n    if (el.scrollHeight !== 0) {\n      el.style.maxHeight = 0\n      el.style.paddingTop = 0\n      el.style.paddingBottom = 0\n    }\n  },\n\n  afterLeave(el: RendererElement) {\n    el.style.maxHeight = ''\n    el.style.overflow = el.dataset.oldOverflow\n    el.style.paddingTop = el.dataset.oldPaddingTop\n    el.style.paddingBottom = el.dataset.oldPaddingBottom\n  },\n}\n</script>\n","import CollapseTransition from './src/collapse-transition.vue'\nimport type { App } from 'vue'\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nCollapseTransition.install = (app: App): void => {\n  app.component(CollapseTransition.name, CollapseTransition)\n}\n\nconst _CollapseTransition = CollapseTransition as SFCWithInstall<\n  typeof CollapseTransition\n>\n\nexport default _CollapseTransition\nexport const ElCollapseTransition = _CollapseTransition\n"],"names":["NODE_KEY","markNodeData","node","data","Object","defineProperty","value","id","enumerable","configurable","writable","getNodeKey","key","getChildState","all","none","allWithoutDisable","i","j","length","n","checked","indeterminate","disabled","half","reInitChecked","childNodes","parent","level","store","checkStrictly","getPropertyFromData","prop","props","config","dataProp","nodeIdSeed","Node","constructor","options","text","expanded","visible","isCurrent","canFocus","name","hasOwn","loaded","loading","initialize","Error","registerNode","isLeaf","isLeafByUser","lazy","setData","defaultExpandAll","expand","Array","isArray","defaultExpandedKeys","includes","autoExpandParent","currentNodeKey","currentNode","_initDefaultCheckedNode","updateLeafState","children","insertChild","label","nodeKey","this","nextSibling","index","indexOf","previousSibling","contains","target","deep","some","child","remove","removeChild","batch","getChildren","push","splice","assign","reactive","insertBefore","ref","insertAfter","dataIndex","deregisterNode","removeChildByData","targetNode","callback","expandParent","done","forEach","item","shouldLoadData","loadData","setChecked","doCreateChildren","array","defaultProps","collapse","load","recursion","passValue","checkDescendants","handleDescendants","isCheck","all2","forceInit","updateChildren","newData","oldData","map","newDataMap","newNodes","isNodeExists","findIndex","keys","call","resolve","TreeStore","option","nodesMap","root","loadFn","_initDefaultCheckedNodes","filter","filterNodeMethod","traverse","allHidden","newVal","instanceChanged","getNode","refData","refNode","append","parentData","parentNode","defaultCheckedKeys","checkedKey","setDefaultCheckedKey","getCheckedNodes","leafOnly","includeHalfChecked","checkedNodes","getCheckedKeys","getHalfCheckedNodes","nodes","getHalfCheckedKeys","_getAllNodes","allNodes","_setCheckedKeys","checkedKeys","sort","a","b","cache","create","toString","node2","setCheckedNodes","setCheckedKeys","key2","setDefaultExpandedKeys","getCurrentNode","setCurrentNode","prevCurrentNode","setUserCurrentNode","shouldAutoExpandParent","currNode","setCurrentNodeKey","_sfc_main","defineComponent","type","required","renderContent","Function","setup","ns","useNamespace","nodeInstance","inject","tree","h","_self","ctx","slots","default","class","be","useNodeExpandEventBroadcast","parentNodeMap","currentNodeMap","treeNodeExpand","provide","broadcastExpanded","accordion","childNode","dragEventsKey","Symbol","useDragNodeHandler","el$","dropIndicator$","dragState","showDropIndicator","draggingNode","dropNode","allowDrop","dropType","treeNodeDragStart","event","treeNode","allowDrag","preventDefault","dataTransfer","effectAllowed","e","emit","treeNodeDragOver","oldDropNode","removeClass","$el","is","dropPrev","dropInner","dropNext","userAllowDropInner","dropEffect","targetPosition","getBoundingClientRect","treePosition","prevPercent","nextPercent","indicatorTop","distance","clientY","top","height","iconPosition","querySelector","dropIndicator","bottom","style","left","right","addClass","treeNodeDragEnd","draggingNodeCopy","components","ElCollapseTransition","ElCheckbox","NodeContent","ElIcon","Loading","Boolean","renderAfterExpand","showCheckbox","emits","childNodeRendered","oldChecked","oldIndeterminate","node$","dragEvents","instance","getCurrentInstance","debugWarn","childrenKey","watch","val","handleSelectChange","nextTick","getNodeKeyUtil","getNodeClass","nodeClassFunc","className","handleClick","expandOnClickNode","handleExpandIconClick","checkOnClickNode","handleCheckChange","handleContextMenu","vnode","stopPropagation","ev","halfCheckedNodes","halfCheckedKeys","handleChildNodeExpand","nodeData","instance2","handleDragStart","draggable","handleDragOver","handleDrop","handleDragEnd","CaretRight","_createElementBlock","_ctx","role","tabindex","onClick","_cache","onContextmenu","onDragstart","onDragover","onDragend","onDrop","_createElementVNode","_normalizeClass","_normalizeStyle","paddingLeft","indent","icon","_openBlock","_createBlock","_withModifiers","onChange","_createCommentVNode","openBlock","_createVNode","withDirectives","_Fragment","_renderList","onNodeExpand","useKeydown","treeItems","shallowRef","checkboxItems","onMounted","initTabIndex","on","handleKeydown","onBeforeUnmount","off","onUpdated","from","querySelectorAll","checkbox","setAttribute","currentItem","code","currentIndex","nextIndex","EVENT_CODE","startIndex","dataset","focus","click","hasInput","_a","checkedItem","ElTreeNode","emptyText","String","Number","highlightCurrent","t","useLocale","isEmpty","computed","every","getNodePath","path","reverse","currentNode2","getCurrentKey","setCurrentKey","handleNodeExpand","updateKeyChildren","formItemContextKey","_toDisplayString","_withDirectives","Tree","app","component","_Tree","ElTree","render","$props","$setup","$data","$options","_component_page_search","_component_page_content","_component_el_tree","_component_page_modal","pageName","searchFormConfig","onResetBtnClick","handleResetClick","onQueryBtnClick","handleQueryClick","contentTableConfig","onNewBtnClick","handleNewData","onEditBtnClick","handleEditData","btnName","defaultInfo","modalConfig","otherInfo","_","menus","onCheck","labelWidth","formItems","field","placeholder","otherOptions","startPlaceholder","endPlaceholder","title","propList","minWidth","slotName","showIndexColumn","showSelectColumn","colLayout","span","itemStyle","padding","PageContent","PageSearch","PageModal","elTreeRef","editCallback","leafKeys","menuList","pageModalRef","undefined","pageContentRef","state","entireMenu","data1","data2","__exports__","beforeEnter","el","enter","afterEnter","beforeLeave","leave","afterLeave","CollapseTransition","_CollapseTransition"],"sourceRoot":""}